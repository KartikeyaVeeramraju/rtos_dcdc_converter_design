
Test_project_udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ccc  08003ccc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd4  08003cd4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000010  08003cec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003cec  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c90b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d96  00000000  00000000  0002c94b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  0002e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002f380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000221a7  00000000  00000000  0002ff20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009da1  00000000  00000000  000520c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf510  00000000  00000000  0005be68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b378  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  0012b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003c9c 	.word	0x08003c9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003c9c 	.word	0x08003c9c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <command_resolve>:
 * output: next mode of UART; Receive or Transmit Data (for accommodating complex transeive schemes)
 *
 * */

uint8_t command_resolve(uint8_t cmd, uint8_t *buf, uint8_t *size_var, uint8_t *resolve_status)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	4603      	mov	r3, r0
 8000512:	73fb      	strb	r3, [r7, #15]
	//resolve the ping function
	//this is a single read single write function
	//transfer 0xAA (ping response if this is received)
	if(cmd == PING)
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d123      	bne.n	8000562 <command_resolve+0x5e>
	{
		if(i == 1)
 800051a:	4b93      	ldr	r3, [pc, #588]	; (8000768 <command_resolve+0x264>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d112      	bne.n	8000548 <command_resolve+0x44>
		{
			buf[0] = PING_RESP;
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	22aa      	movs	r2, #170	; 0xaa
 8000526:	701a      	strb	r2, [r3, #0]
			*size_var = 1; //only one byte to transfer next
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
			ret = TRANSMIT;
 800052e:	4b8f      	ldr	r3, [pc, #572]	; (800076c <command_resolve+0x268>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
			*resolve_status = NOT_RESOLVED; //end of command handling
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
			i++;
 800053a:	4b8b      	ldr	r3, [pc, #556]	; (8000768 <command_resolve+0x264>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b89      	ldr	r3, [pc, #548]	; (8000768 <command_resolve+0x264>)
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	e00c      	b.n	8000562 <command_resolve+0x5e>
		}
		else if(i == 2)
 8000548:	4b87      	ldr	r3, [pc, #540]	; (8000768 <command_resolve+0x264>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d108      	bne.n	8000562 <command_resolve+0x5e>
		{
			//this is being called from TXcpltcallback
			ret = RECEIVE;
 8000550:	4b86      	ldr	r3, [pc, #536]	; (800076c <command_resolve+0x268>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
			*resolve_status = RESOLVED; //end of command handling
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
			i = 1;
 800055c:	4b82      	ldr	r3, [pc, #520]	; (8000768 <command_resolve+0x264>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]

	//resolve the V33_toggle
	//this is a 2 byte sequence so wait for the next byte to arrive
	//first byte receive is the command identifier
	//second byte receive is the action command
	if(cmd == V33_TOGGLE)
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d129      	bne.n	80005bc <command_resolve+0xb8>
	{
		if(i == 1)
 8000568:	4b7f      	ldr	r3, [pc, #508]	; (8000768 <command_resolve+0x264>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10c      	bne.n	800058a <command_resolve+0x86>
		{

			i++;
 8000570:	4b7d      	ldr	r3, [pc, #500]	; (8000768 <command_resolve+0x264>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b7b      	ldr	r3, [pc, #492]	; (8000768 <command_resolve+0x264>)
 800057a:	701a      	strb	r2, [r3, #0]
			ret = RECEIVE;
 800057c:	4b7b      	ldr	r3, [pc, #492]	; (800076c <command_resolve+0x268>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
			*resolve_status = NOT_RESOLVED; //end of command handling
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e018      	b.n	80005bc <command_resolve+0xb8>
		}
		else if(i == 2)
 800058a:	4b77      	ldr	r3, [pc, #476]	; (8000768 <command_resolve+0x264>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d114      	bne.n	80005bc <command_resolve+0xb8>
		{
			//buffer now has either a switch on r switch off command
			i = 1; //reset index
 8000592:	4b75      	ldr	r3, [pc, #468]	; (8000768 <command_resolve+0x264>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
			//buf[0] has the incoming subcommand
			if(buf[0] == Con_ON)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d103      	bne.n	80005a8 <command_resolve+0xa4>
			{
				update_system(startcon1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 f975 	bl	8000890 <update_system>
 80005a6:	e006      	b.n	80005b6 <command_resolve+0xb2>
			}
			else if(buf[0] == Con_OFF)
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <command_resolve+0xb2>
			{
				update_system(stopcon1);
 80005b0:	2002      	movs	r0, #2
 80005b2:	f000 f96d 	bl	8000890 <update_system>
			}
			*resolve_status = RESOLVED; //end of command handling
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]

		//resolve the V25_toggle
		//this is a 2 byte sequence so wait for the next byte to arrive
		//first byte receive is the command identifier
		//second byte receive is the action command
		if(cmd == V25_TOGGLE)
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d129      	bne.n	8000616 <command_resolve+0x112>
		{
			if(i == 1)
 80005c2:	4b69      	ldr	r3, [pc, #420]	; (8000768 <command_resolve+0x264>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d10c      	bne.n	80005e4 <command_resolve+0xe0>
			{

				i++;
 80005ca:	4b67      	ldr	r3, [pc, #412]	; (8000768 <command_resolve+0x264>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b65      	ldr	r3, [pc, #404]	; (8000768 <command_resolve+0x264>)
 80005d4:	701a      	strb	r2, [r3, #0]
				ret = RECEIVE;
 80005d6:	4b65      	ldr	r3, [pc, #404]	; (800076c <command_resolve+0x268>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
				*resolve_status = NOT_RESOLVED;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	e018      	b.n	8000616 <command_resolve+0x112>
			}
			else if(i == 2)
 80005e4:	4b60      	ldr	r3, [pc, #384]	; (8000768 <command_resolve+0x264>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d114      	bne.n	8000616 <command_resolve+0x112>
			{
				//buffer now has either a switch on r switch off command
				i = 1; //reset index
 80005ec:	4b5e      	ldr	r3, [pc, #376]	; (8000768 <command_resolve+0x264>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
				//buf[0] has the incoming subcommand
				if(buf[0] == Con_ON)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d103      	bne.n	8000602 <command_resolve+0xfe>
				{
					update_system(startcon2);
 80005fa:	2003      	movs	r0, #3
 80005fc:	f000 f948 	bl	8000890 <update_system>
 8000600:	e006      	b.n	8000610 <command_resolve+0x10c>
				}
				else if(buf[0] == Con_OFF)
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d102      	bne.n	8000610 <command_resolve+0x10c>
				{
					update_system(stopcon2);
 800060a:	2004      	movs	r0, #4
 800060c:	f000 f940 	bl	8000890 <update_system>
				}
				*resolve_status = RESOLVED;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]

		//this is a one byte read and two transmit sequence
		//first instance is the command identifier
		//second instance initiates the buffer load and starts the UART transmit with the
		//two status registers of the converters
		if(cmd == HEALTH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2b03      	cmp	r3, #3
 800061a:	d12b      	bne.n	8000674 <command_resolve+0x170>
		{
			if(i == 1)
 800061c:	4b52      	ldr	r3, [pc, #328]	; (8000768 <command_resolve+0x264>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d118      	bne.n	8000656 <command_resolve+0x152>
			{
				buf[0] = converter1.status_reg;
 8000624:	4b52      	ldr	r3, [pc, #328]	; (8000770 <command_resolve+0x26c>)
 8000626:	7b5a      	ldrb	r2, [r3, #13]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	701a      	strb	r2, [r3, #0]
				buf[1] = converter2.status_reg;
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	3301      	adds	r3, #1
 8000630:	4a50      	ldr	r2, [pc, #320]	; (8000774 <command_resolve+0x270>)
 8000632:	7b52      	ldrb	r2, [r2, #13]
 8000634:	701a      	strb	r2, [r3, #0]
				*size_var = 2; //only two bytes to transfer next
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2202      	movs	r2, #2
 800063a:	701a      	strb	r2, [r3, #0]
				ret = TRANSMIT;
 800063c:	4b4b      	ldr	r3, [pc, #300]	; (800076c <command_resolve+0x268>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
				*resolve_status = NOT_RESOLVED; //end of command handling
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
				i++;
 8000648:	4b47      	ldr	r3, [pc, #284]	; (8000768 <command_resolve+0x264>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b45      	ldr	r3, [pc, #276]	; (8000768 <command_resolve+0x264>)
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e0a9      	b.n	80007aa <command_resolve+0x2a6>
			}
			else if(i == 2)
 8000656:	4b44      	ldr	r3, [pc, #272]	; (8000768 <command_resolve+0x264>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	f040 80a5 	bne.w	80007aa <command_resolve+0x2a6>
			{
				//this is being called from TXcpltcallback
				ret = RECEIVE;
 8000660:	4b42      	ldr	r3, [pc, #264]	; (800076c <command_resolve+0x268>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
				*resolve_status = RESOLVED; //end of command handling
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
				i = 1;
 800066c:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <command_resolve+0x264>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e09a      	b.n	80007aa <command_resolve+0x2a6>
			}

		}
		//duty override for converter33
		//This is a two byte read sequence similar to toggle
		else if(cmd == DUTY33)
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b04      	cmp	r3, #4
 8000678:	d146      	bne.n	8000708 <command_resolve+0x204>
			{
				if(i == 1)
 800067a:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <command_resolve+0x264>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10c      	bne.n	800069c <command_resolve+0x198>
				{

					i++;
 8000682:	4b39      	ldr	r3, [pc, #228]	; (8000768 <command_resolve+0x264>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <command_resolve+0x264>)
 800068c:	701a      	strb	r2, [r3, #0]
					ret = RECEIVE;
 800068e:	4b37      	ldr	r3, [pc, #220]	; (800076c <command_resolve+0x268>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
					*resolve_status = NOT_RESOLVED; //end of command handling
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e086      	b.n	80007aa <command_resolve+0x2a6>
				}
				else if(i == 2)
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <command_resolve+0x264>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d117      	bne.n	80006d4 <command_resolve+0x1d0>
				{
					i++; //reset index
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <command_resolve+0x264>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <command_resolve+0x264>)
 80006ae:	701a      	strb	r2, [r3, #0]
					ret = RECEIVE;
 80006b0:	4b2e      	ldr	r3, [pc, #184]	; (800076c <command_resolve+0x268>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
					converter1.duty = buf[0];
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <command_resolve+0x26c>)
 80006be:	801a      	strh	r2, [r3, #0]
					converter1.duty = converter1.duty<<8;
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <command_resolve+0x26c>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	021b      	lsls	r3, r3, #8
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <command_resolve+0x26c>)
 80006ca:	801a      	strh	r2, [r3, #0]
					*resolve_status = NOT_RESOLVED; //end of command handling
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e06a      	b.n	80007aa <command_resolve+0x2a6>
				}
				else if(i == 3)
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <command_resolve+0x264>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d166      	bne.n	80007aa <command_resolve+0x2a6>
				{
					i = 1;
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <command_resolve+0x264>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
					ret = RECEIVE;
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <command_resolve+0x268>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
					converter1.duty = (converter1.duty | buf[0]);
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <command_resolve+0x26c>)
 80006ea:	881a      	ldrh	r2, [r3, #0]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <command_resolve+0x26c>)
 80006f8:	801a      	strh	r2, [r3, #0]
					//update_duty(V3_3, converter1.duty);
					update_system(duty1);
 80006fa:	2005      	movs	r0, #5
 80006fc:	f000 f8c8 	bl	8000890 <update_system>
					*resolve_status = RESOLVED;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e050      	b.n	80007aa <command_resolve+0x2a6>
				}

			}
		else if(cmd == DUTY25)
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b05      	cmp	r3, #5
 800070c:	d14d      	bne.n	80007aa <command_resolve+0x2a6>
					{
						if(i == 1)
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <command_resolve+0x264>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d10c      	bne.n	8000730 <command_resolve+0x22c>
						{
							i++;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <command_resolve+0x264>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <command_resolve+0x264>)
 8000720:	701a      	strb	r2, [r3, #0]
							ret = RECEIVE;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <command_resolve+0x268>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
							*resolve_status = NOT_RESOLVED; //end of command handling
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e03c      	b.n	80007aa <command_resolve+0x2a6>
						}
						else if(i == 2)
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <command_resolve+0x264>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d11f      	bne.n	8000778 <command_resolve+0x274>
						{
							i++; //reset index
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <command_resolve+0x264>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <command_resolve+0x264>)
 8000742:	701a      	strb	r2, [r3, #0]
							ret = RECEIVE;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <command_resolve+0x268>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
							converter2.duty = buf[0];
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <command_resolve+0x270>)
 8000752:	801a      	strh	r2, [r3, #0]
							converter2.duty = converter2.duty<<8;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <command_resolve+0x270>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	b29a      	uxth	r2, r3
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <command_resolve+0x270>)
 800075e:	801a      	strh	r2, [r3, #0]
							*resolve_status = NOT_RESOLVED; //end of command handling
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e020      	b.n	80007aa <command_resolve+0x2a6>
 8000768:	20000042 	.word	0x20000042
 800076c:	2000005a 	.word	0x2000005a
 8000770:	20000044 	.word	0x20000044
 8000774:	2000002c 	.word	0x2000002c
						}
						else if(i == 3)
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <command_resolve+0x2b4>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d114      	bne.n	80007aa <command_resolve+0x2a6>
						{
							i = 1;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <command_resolve+0x2b4>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
							ret = RECEIVE;
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <command_resolve+0x2b8>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
							converter2.duty = (converter2.duty | buf[0]);
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <command_resolve+0x2bc>)
 800078e:	881a      	ldrh	r2, [r3, #0]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b29b      	uxth	r3, r3
 8000796:	4313      	orrs	r3, r2
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <command_resolve+0x2bc>)
 800079c:	801a      	strh	r2, [r3, #0]
							//update_duty(V2_5, converter2.duty);
							update_system(duty2);
 800079e:	2006      	movs	r0, #6
 80007a0:	f000 f876 	bl	8000890 <update_system>
							*resolve_status = RESOLVED;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
						}

					}

	return ret;
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <command_resolve+0x2b8>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000042 	.word	0x20000042
 80007bc:	2000005a 	.word	0x2000005a
 80007c0:	2000002c 	.word	0x2000002c

080007c4 <Manager_init>:

void Manager_init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	i = 1; //initialize index
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <Manager_init+0x14>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	20000042 	.word	0x20000042

080007dc <set_bit_STAREG>:
INPUT: Bit value to be set (See status register bits section in PPU_manager.h for details)
RETURNS: Nothing
CAUTION:
************************************************************************/
void set_bit_STAREG(uint8_t byte_value, uint8_t conname)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
	if(conname == v33)
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d107      	bne.n	8000802 <set_bit_STAREG+0x26>
	{
		converter1.status_reg = (converter1.status_reg | byte_value);
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <set_bit_STAREG+0x48>)
 80007f4:	7b5a      	ldrb	r2, [r3, #13]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <set_bit_STAREG+0x48>)
 80007fe:	735a      	strb	r2, [r3, #13]
	else if(conname == v25)
	{
		converter2.status_reg = (converter2.status_reg | byte_value);
	}

}
 8000800:	e009      	b.n	8000816 <set_bit_STAREG+0x3a>
	else if(conname == v25)
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d106      	bne.n	8000816 <set_bit_STAREG+0x3a>
		converter2.status_reg = (converter2.status_reg | byte_value);
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <set_bit_STAREG+0x4c>)
 800080a:	7b5a      	ldrb	r2, [r3, #13]
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4313      	orrs	r3, r2
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <set_bit_STAREG+0x4c>)
 8000814:	735a      	strb	r2, [r3, #13]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000044 	.word	0x20000044
 8000828:	2000002c 	.word	0x2000002c

0800082c <clear_bit_STAREG>:
INPUT: Bit value to be cleared (See status register bits section in PPU_manager.h for details)
RETURNS: Nothing
CAUTION:
************************************************************************/
void clear_bit_STAREG(uint8_t byte_value, uint8_t conname)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	4613      	mov	r3, r2
 800083a:	71bb      	strb	r3, [r7, #6]

    	if(conname == v33)
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d10c      	bne.n	800085c <clear_bit_STAREG+0x30>
    	{
    		converter1.status_reg = (converter1.status_reg & (~byte_value));
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <clear_bit_STAREG+0x5c>)
 8000844:	7b5b      	ldrb	r3, [r3, #13]
 8000846:	b25a      	sxtb	r2, r3
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	43db      	mvns	r3, r3
 800084e:	b25b      	sxtb	r3, r3
 8000850:	4013      	ands	r3, r2
 8000852:	b25b      	sxtb	r3, r3
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <clear_bit_STAREG+0x5c>)
 8000858:	735a      	strb	r2, [r3, #13]
    	}
    	else if(conname == v25)
    	{
    		converter2.status_reg = (converter2.status_reg & (~byte_value));
    	}
}
 800085a:	e00e      	b.n	800087a <clear_bit_STAREG+0x4e>
    	else if(conname == v25)
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d10b      	bne.n	800087a <clear_bit_STAREG+0x4e>
    		converter2.status_reg = (converter2.status_reg & (~byte_value));
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <clear_bit_STAREG+0x60>)
 8000864:	7b5b      	ldrb	r3, [r3, #13]
 8000866:	b25a      	sxtb	r2, r3
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	43db      	mvns	r3, r3
 800086e:	b25b      	sxtb	r3, r3
 8000870:	4013      	ands	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <clear_bit_STAREG+0x60>)
 8000878:	735a      	strb	r2, [r3, #13]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000044 	.word	0x20000044
 800088c:	2000002c 	.word	0x2000002c

08000890 <update_system>:

void update_system(uint8_t command)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	switch(command)
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	3b01      	subs	r3, #1
 800089e:	2b05      	cmp	r3, #5
 80008a0:	d856      	bhi.n	8000950 <update_system+0xc0>
 80008a2:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <update_system+0x18>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008c1 	.word	0x080008c1
 80008ac:	080008d7 	.word	0x080008d7
 80008b0:	080008ed 	.word	0x080008ed
 80008b4:	08000903 	.word	0x08000903
 80008b8:	08000919 	.word	0x08000919
 80008bc:	08000935 	.word	0x08000935
	{

		case startcon1:
					{
						start_pwm(V3_3);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 f84d 	bl	8000960 <start_pwm>
						set_bit_STAREG(status_bit, v33);
 80008c6:	2101      	movs	r1, #1
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff ff87 	bl	80007dc <set_bit_STAREG>
						converter1.status = true;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <update_system+0xc8>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	721a      	strb	r2, [r3, #8]
						break;
 80008d4:	e03c      	b.n	8000950 <update_system+0xc0>
					}
		case stopcon1:
					{
						stop_pwm(V3_3);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 f8a4 	bl	8000a24 <stop_pwm>
						clear_bit_STAREG(status_bit, v33);
 80008dc:	2101      	movs	r1, #1
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff ffa4 	bl	800082c <clear_bit_STAREG>
						converter1.status = false;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <update_system+0xc8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	721a      	strb	r2, [r3, #8]
						break;
 80008ea:	e031      	b.n	8000950 <update_system+0xc0>
					}
		case startcon2:
					{
						start_pwm(V2_5);
 80008ec:	2002      	movs	r0, #2
 80008ee:	f000 f837 	bl	8000960 <start_pwm>
						set_bit_STAREG(status_bit, v25);
 80008f2:	2102      	movs	r1, #2
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff ff71 	bl	80007dc <set_bit_STAREG>
						converter2.status = true;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <update_system+0xcc>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	721a      	strb	r2, [r3, #8]
						break;
 8000900:	e026      	b.n	8000950 <update_system+0xc0>
					}
		case stopcon2:
					{
						stop_pwm(V2_5);
 8000902:	2002      	movs	r0, #2
 8000904:	f000 f88e 	bl	8000a24 <stop_pwm>
						clear_bit_STAREG(status_bit, v25);
 8000908:	2102      	movs	r1, #2
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff ff8e 	bl	800082c <clear_bit_STAREG>
						converter2.status = false;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <update_system+0xcc>)
 8000912:	2200      	movs	r2, #0
 8000914:	721a      	strb	r2, [r3, #8]
						break;
 8000916:	e01b      	b.n	8000950 <update_system+0xc0>
					}
		case duty1:
					{
						update_duty(V3_3, converter1.duty);
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <update_system+0xc8>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	2001      	movs	r0, #1
 8000920:	f000 f8c8 	bl	8000ab4 <update_duty>
						converter1.controller = false;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <update_system+0xc8>)
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
						clear_bit_STAREG(controller_status_bit, v33);
 800092a:	2101      	movs	r1, #1
 800092c:	2010      	movs	r0, #16
 800092e:	f7ff ff7d 	bl	800082c <clear_bit_STAREG>
						break;
 8000932:	e00d      	b.n	8000950 <update_system+0xc0>
					}
		case duty2:
					{
						update_duty(V2_5, converter2.duty);
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <update_system+0xcc>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	2002      	movs	r0, #2
 800093c:	f000 f8ba 	bl	8000ab4 <update_duty>
						converter2.controller = false;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <update_system+0xcc>)
 8000942:	2200      	movs	r2, #0
 8000944:	731a      	strb	r2, [r3, #12]
						clear_bit_STAREG(controller_status_bit, v25);
 8000946:	2102      	movs	r1, #2
 8000948:	2010      	movs	r0, #16
 800094a:	f7ff ff6f 	bl	800082c <clear_bit_STAREG>
						break;
 800094e:	bf00      	nop
					}
	}
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000044 	.word	0x20000044
 800095c:	2000002c 	.word	0x2000002c

08000960 <start_pwm>:

uint32_t *p; //pointer pointing to the address of registers


void start_pwm(uint8_t channel)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	if(channel == V3_3)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d121      	bne.n	80009b4 <start_pwm+0x54>
	{
		//latch onto the address of CR1 in Timer 1
		  //start the timer
		  p = (uint32_t)(TIM1Base_ADDR+CR1);
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <start_pwm+0xa8>)
 8000972:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <start_pwm+0xac>)
 8000974:	601a      	str	r2, [r3, #0]
		  *p = (*p	|	ENABLE_BIT);
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <start_pwm+0xa8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <start_pwm+0xa8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f042 0201 	orr.w	r2, r2, #1
 8000984:	601a      	str	r2, [r3, #0]
		  //enable CH4 compare
		  p = (uint32_t)(TIM1Base_ADDR+CCER);
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <start_pwm+0xa8>)
 8000988:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <start_pwm+0xb0>)
 800098a:	601a      	str	r2, [r3, #0]
		  *p = (*p	|	CH4_OUT_BIT);
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <start_pwm+0xa8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <start_pwm+0xa8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800099a:	601a      	str	r2, [r3, #0]
		  //enable main output bit
		  p = (uint32_t)(TIM1Base_ADDR+BDTR);
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <start_pwm+0xa8>)
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <start_pwm+0xb4>)
 80009a0:	601a      	str	r2, [r3, #0]
		  *p = (*p	|	 MASTER_OP_ENABLE_BIT);
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <start_pwm+0xa8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <start_pwm+0xa8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009b0:	601a      	str	r2, [r3, #0]
		  *p = (*p	|	CH4_OUT_BIT);
		  //enable main output bit
		  p = (uint32_t)(TIM8Base_ADDR+BDTR);
		  *p = (*p	|	 MASTER_OP_ENABLE_BIT);
	}
}
 80009b2:	e023      	b.n	80009fc <start_pwm+0x9c>
	else if(channel == V2_5)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d120      	bne.n	80009fc <start_pwm+0x9c>
		  p = (uint32_t)(TIM8Base_ADDR+CR1);
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <start_pwm+0xa8>)
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <start_pwm+0xb8>)
 80009be:	601a      	str	r2, [r3, #0]
		  *p = (*p	|	ENABLE_BIT);
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <start_pwm+0xa8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <start_pwm+0xa8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0201 	orr.w	r2, r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
		  p = (uint32_t)(TIM8Base_ADDR+CCER);
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <start_pwm+0xa8>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <start_pwm+0xbc>)
 80009d4:	601a      	str	r2, [r3, #0]
		  *p = (*p	|	CH4_OUT_BIT);
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <start_pwm+0xa8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <start_pwm+0xa8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009e4:	601a      	str	r2, [r3, #0]
		  p = (uint32_t)(TIM8Base_ADDR+BDTR);
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <start_pwm+0xa8>)
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <start_pwm+0xc0>)
 80009ea:	601a      	str	r2, [r3, #0]
		  *p = (*p	|	 MASTER_OP_ENABLE_BIT);
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <start_pwm+0xa8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <start_pwm+0xa8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	2000005c 	.word	0x2000005c
 8000a0c:	40010000 	.word	0x40010000
 8000a10:	40010020 	.word	0x40010020
 8000a14:	40010044 	.word	0x40010044
 8000a18:	40010400 	.word	0x40010400
 8000a1c:	40010420 	.word	0x40010420
 8000a20:	40010444 	.word	0x40010444

08000a24 <stop_pwm>:

void stop_pwm(uint8_t channel)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	if(channel == V3_3)
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d116      	bne.n	8000a62 <stop_pwm+0x3e>
	{
		  //enable main output bit
		p = (uint32_t)(TIM1Base_ADDR+BDTR);
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <stop_pwm+0x7c>)
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <stop_pwm+0x80>)
 8000a38:	601a      	str	r2, [r3, #0]
		*p = (*p	&	 (~MASTER_OP_ENABLE_BIT));
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <stop_pwm+0x7c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <stop_pwm+0x7c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a48:	601a      	str	r2, [r3, #0]
		p = TIM1Base_ADDR+CR1;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <stop_pwm+0x7c>)
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <stop_pwm+0x84>)
 8000a4e:	601a      	str	r2, [r3, #0]
		*p = (*p	&	(~ENABLE_BIT));
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <stop_pwm+0x7c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <stop_pwm+0x7c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 0201 	bic.w	r2, r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
		p = (uint32_t)(TIM8Base_ADDR+BDTR);
		*p = (*p	&	 (~MASTER_OP_ENABLE_BIT));
		p = TIM8Base_ADDR+CR1;
		*p = (*p	&	(~ENABLE_BIT));
	}
}
 8000a60:	e018      	b.n	8000a94 <stop_pwm+0x70>
	else if(channel == V2_5)
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d115      	bne.n	8000a94 <stop_pwm+0x70>
		p = (uint32_t)(TIM8Base_ADDR+BDTR);
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <stop_pwm+0x7c>)
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <stop_pwm+0x88>)
 8000a6c:	601a      	str	r2, [r3, #0]
		*p = (*p	&	 (~MASTER_OP_ENABLE_BIT));
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <stop_pwm+0x7c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <stop_pwm+0x7c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a7c:	601a      	str	r2, [r3, #0]
		p = TIM8Base_ADDR+CR1;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <stop_pwm+0x7c>)
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <stop_pwm+0x8c>)
 8000a82:	601a      	str	r2, [r3, #0]
		*p = (*p	&	(~ENABLE_BIT));
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <stop_pwm+0x7c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <stop_pwm+0x7c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0201 	bic.w	r2, r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	2000005c 	.word	0x2000005c
 8000aa4:	40010044 	.word	0x40010044
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40010444 	.word	0x40010444
 8000ab0:	40010400 	.word	0x40010400

08000ab4 <update_duty>:

void update_duty(uint8_t channel, uint16_t duty)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
		if(channel == V3_3)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d106      	bne.n	8000ad8 <update_duty+0x24>
		{
			p = (uint32_t)(TIM1Base_ADDR+CCR4);
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <update_duty+0x44>)
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <update_duty+0x48>)
 8000ace:	601a      	str	r2, [r3, #0]
			*p = duty;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <update_duty+0x44>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	88ba      	ldrh	r2, [r7, #4]
 8000ad6:	601a      	str	r2, [r3, #0]
		}
		if(channel == V2_5)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d106      	bne.n	8000aec <update_duty+0x38>
		{
			p = (uint32_t)(TIM8Base_ADDR+CCR4);
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <update_duty+0x44>)
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <update_duty+0x4c>)
 8000ae2:	601a      	str	r2, [r3, #0]
			*p = duty;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <update_duty+0x44>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
		}
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	2000005c 	.word	0x2000005c
 8000afc:	40010040 	.word	0x40010040
 8000b00:	40010440 	.word	0x40010440

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000b08:	f000 fc72 	bl	80013f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  Manager_init();
 8000b0c:	f7ff fe5a 	bl	80007c4 <Manager_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f812 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b14:	f000 f9e2 	bl	8000edc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b18:	f000 f87a 	bl	8000c10 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000b1c:	f000 f916 	bl	8000d4c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000b20:	f000 f9b2 	bl	8000e88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
  //HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
  HAL_UART_Receive_IT(&huart2, buf, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	4902      	ldr	r1, [pc, #8]	; (8000b30 <main+0x2c>)
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <main+0x30>)
 8000b2a:	f002 fa8d 	bl	8003048 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <main+0x2a>
 8000b30:	20000124 	.word	0x20000124
 8000b34:	200000e0 	.word	0x200000e0

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2234      	movs	r2, #52	; 0x34
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 f8a0 	bl	8003c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000bb0:	235a      	movs	r3, #90	; 0x5a
 8000bb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 f9bd 	bl	8001f44 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bd0:	f000 f9f5 	bl	8000fbe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 ff3b 	bl	8001a6c <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000bfc:	f000 f9df 	bl	8000fbe <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3750      	adds	r7, #80	; 0x50
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	; 0x58
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 f81f 	bl	8003c8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c50:	4a3d      	ldr	r2, [pc, #244]	; (8000d48 <MX_TIM1_Init+0x138>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c54:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 180;
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c62:	22b4      	movs	r2, #180	; 0xb4
 8000c64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c72:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c78:	4832      	ldr	r0, [pc, #200]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c7a:	f001 fbbd 	bl	80023f8 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c84:	f000 f99b 	bl	8000fbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c92:	4619      	mov	r1, r3
 8000c94:	482b      	ldr	r0, [pc, #172]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000c96:	f001 fcd5 	bl	8002644 <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ca0:	f000 f98d 	bl	8000fbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ca4:	4827      	ldr	r0, [pc, #156]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000ca6:	f001 fbd2 	bl	800244e <HAL_TIM_PWM_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000cb0:	f000 f985 	bl	8000fbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4820      	ldr	r0, [pc, #128]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000cc4:	f002 f860 	bl	8002d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000cce:	f000 f976 	bl	8000fbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd2:	2360      	movs	r3, #96	; 0x60
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 90;
 8000cd6:	235a      	movs	r3, #90	; 0x5a
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	220c      	movs	r2, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000cf4:	f001 fbe0 	bl	80024b8 <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000cfe:	f000 f95e 	bl	8000fbe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000d26:	f002 f8ab 	bl	8002e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000d30:	f000 f945 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM1_Init+0x134>)
 8000d36:	f000 f9cf 	bl	80010d8 <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3758      	adds	r7, #88	; 0x58
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000a0 	.word	0x200000a0
 8000d48:	40010000 	.word	0x40010000

08000d4c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b096      	sub	sp, #88	; 0x58
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2220      	movs	r2, #32
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 ff81 	bl	8003c8c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000d8c:	4a3d      	ldr	r2, [pc, #244]	; (8000e84 <MX_TIM8_Init+0x138>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d90:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 257;
 8000d9c:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000d9e:	f240 1201 	movw	r2, #257	; 0x101
 8000da2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000daa:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000db6:	4832      	ldr	r0, [pc, #200]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000db8:	f001 fb1e 	bl	80023f8 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000dc2:	f000 f8fc 	bl	8000fbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	482b      	ldr	r0, [pc, #172]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000dd4:	f001 fc36 	bl	8002644 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000dde:	f000 f8ee 	bl	8000fbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000de2:	4827      	ldr	r0, [pc, #156]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000de4:	f001 fb33 	bl	800244e <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000dee:	f000 f8e6 	bl	8000fbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000e02:	f001 ffc1 	bl	8002d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e0c:	f000 f8d7 	bl	8000fbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 150;
 8000e14:	2396      	movs	r3, #150	; 0x96
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4813      	ldr	r0, [pc, #76]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000e32:	f001 fb41 	bl	80024b8 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000e3c:	f000 f8bf 	bl	8000fbe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000e64:	f002 f80c 	bl	8002e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8000e6e:	f000 f8a6 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <MX_TIM8_Init+0x134>)
 8000e74:	f000 f930 	bl	80010d8 <HAL_TIM_MspPostInit>

}
 8000e78:	bf00      	nop
 8000e7a:	3758      	adds	r7, #88	; 0x58
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000060 	.word	0x20000060
 8000e84:	40010400 	.word	0x40010400

08000e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART2_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f002 f830 	bl	8002f24 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f878 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000e0 	.word	0x200000e0
 8000ed8:	40004400 	.word	0x40004400

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_GPIO_Init+0xc4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2120      	movs	r1, #32
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <MX_GPIO_Init+0xc8>)
 8000f4c:	f000 fd74 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_GPIO_Init+0xcc>)
 8000f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	4811      	ldr	r0, [pc, #68]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f66:	f000 fbd5 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <MX_GPIO_Init+0xc8>)
 8000f82:	f000 fbc7 	bl	8001714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2028      	movs	r0, #40	; 0x28
 8000f8c:	f000 fb69 	bl	8001662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f90:	2028      	movs	r0, #40	; 0x28
 8000f92:	f000 fb82 	bl	800169a <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	40020800 	.word	0x40020800

08000fb0 <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */

void USART1_IRQHandler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_TIM_Base_MspInit+0xac>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12d      	bne.n	800109a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a21      	ldr	r2, [pc, #132]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a1a      	ldr	r2, [pc, #104]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001088:	2301      	movs	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	480f      	ldr	r0, [pc, #60]	; (80010d0 <HAL_TIM_Base_MspInit+0xb4>)
 8001094:	f000 fb3e 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001098:	e012      	b.n	80010c0 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM8)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_TIM_Base_MspInit+0xb8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d10d      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	6453      	str	r3, [r2, #68]	; 0x44
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_TIM_Base_MspInit+0xb0>)
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40010400 	.word	0x40010400

080010d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a25      	ldr	r2, [pc, #148]	; (800118c <HAL_TIM_MspPostInit+0xb4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d11f      	bne.n	800113a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_TIM_MspPostInit+0xb8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_TIM_MspPostInit+0xb8>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_TIM_MspPostInit+0xb8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001116:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4818      	ldr	r0, [pc, #96]	; (8001194 <HAL_TIM_MspPostInit+0xbc>)
 8001134:	f000 faee 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001138:	e023      	b.n	8001182 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <HAL_TIM_MspPostInit+0xc0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d11e      	bne.n	8001182 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_TIM_MspPostInit+0xb8>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_TIM_MspPostInit+0xb8>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_TIM_MspPostInit+0xb8>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001172:	2303      	movs	r3, #3
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <HAL_TIM_MspPostInit+0xc4>)
 800117e:	f000 fac9 	bl	8001714 <HAL_GPIO_Init>
}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010000 	.word	0x40010000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	40010400 	.word	0x40010400
 800119c:	40020800 	.word	0x40020800

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_UART_MspInit+0x94>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d133      	bne.n	800122a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011fa:	230c      	movs	r3, #12
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120a:	2307      	movs	r3, #7
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_UART_MspInit+0x9c>)
 8001216:	f000 fa7d 	bl	8001714 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2026      	movs	r0, #38	; 0x26
 8001220:	f000 fa1f 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001224:	2026      	movs	r0, #38	; 0x26
 8001226:	f000 fa38 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40004400 	.word	0x40004400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <USART2_IRQHandler+0x10>)
 80012a6:	f001 ff25 	bl	80030f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000e0 	.word	0x200000e0

080012b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  //get the value from the buffer 0 location and store into cmd variable;

	//only update the command if the resolve_status of the command resolve_command() function is resolved
	if(resolve_status == RESOLVED)
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_UART_RxCpltCallback+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d103      	bne.n	80012dc <HAL_UART_RxCpltCallback+0x18>
	{
		cmd = buf[0]; //only enter here if a new command is incoming else
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_UART_RxCpltCallback+0x5c>)
 80012d6:	781a      	ldrb	r2, [r3, #0]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_UART_RxCpltCallback+0x60>)
 80012da:	701a      	strb	r2, [r3, #0]
		//freeze the command until it is resolved; modified by the command_resolve() function
	}
  //call the command resolve function to interpret the incoming command
  next_mode = command_resolve(cmd, buf, &transfer_length, &resolve_status);
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_UART_RxCpltCallback+0x60>)
 80012de:	7818      	ldrb	r0, [r3, #0]
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_UART_RxCpltCallback+0x58>)
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_UART_RxCpltCallback+0x64>)
 80012e4:	490e      	ldr	r1, [pc, #56]	; (8001320 <HAL_UART_RxCpltCallback+0x5c>)
 80012e6:	f7ff f90d 	bl	8000504 <command_resolve>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_UART_RxCpltCallback+0x68>)
 80012f0:	701a      	strb	r2, [r3, #0]

  if(next_mode == TRANSMIT)
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_UART_RxCpltCallback+0x68>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d107      	bne.n	800130a <HAL_UART_RxCpltCallback+0x46>
  {

	  HAL_UART_Transmit_IT(&huart2, buf, transfer_length);
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_UART_RxCpltCallback+0x64>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	4907      	ldr	r1, [pc, #28]	; (8001320 <HAL_UART_RxCpltCallback+0x5c>)
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <HAL_UART_RxCpltCallback+0x6c>)
 8001306:	f001 fe5a 	bl	8002fbe <HAL_UART_Transmit_IT>
//  for(i=0;i<transfer_length;i++)
//  {
//	  buf[i] = 0;
//
  //ready for the next UART receive
  HAL_UART_Receive_IT(&huart2, buf, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	4904      	ldr	r1, [pc, #16]	; (8001320 <HAL_UART_RxCpltCallback+0x5c>)
 800130e:	4808      	ldr	r0, [pc, #32]	; (8001330 <HAL_UART_RxCpltCallback+0x6c>)
 8001310:	f001 fe9a 	bl	8003048 <HAL_UART_Receive_IT>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	20000124 	.word	0x20000124
 8001324:	20000138 	.word	0x20000138
 8001328:	20000120 	.word	0x20000120
 800132c:	20000121 	.word	0x20000121
 8001330:	200000e0 	.word	0x200000e0

08001334 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	next_mode = command_resolve(cmd, buf, &transfer_length, &resolve_status);
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <HAL_UART_TxCpltCallback+0x28>)
 800133e:	7818      	ldrb	r0, [r3, #0]
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_UART_TxCpltCallback+0x2c>)
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_UART_TxCpltCallback+0x30>)
 8001344:	4908      	ldr	r1, [pc, #32]	; (8001368 <HAL_UART_TxCpltCallback+0x34>)
 8001346:	f7ff f8dd 	bl	8000504 <command_resolve>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_UART_TxCpltCallback+0x38>)
 8001350:	701a      	strb	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000138 	.word	0x20000138
 8001360:	20000000 	.word	0x20000000
 8001364:	20000120 	.word	0x20000120
 8001368:	20000124 	.word	0x20000124
 800136c:	20000121 	.word	0x20000121

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <SystemInit+0x28>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a07      	ldr	r2, [pc, #28]	; (8001398 <SystemInit+0x28>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SystemInit+0x28>)
 8001386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800138a:	609a      	str	r2, [r3, #8]
#endif
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013a2:	e003      	b.n	80013ac <LoopCopyDataInit>

080013a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013aa:	3104      	adds	r1, #4

080013ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013b4:	d3f6      	bcc.n	80013a4 <CopyDataInit>
  ldr  r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013b8:	e002      	b.n	80013c0 <LoopFillZerobss>

080013ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013bc:	f842 3b04 	str.w	r3, [r2], #4

080013c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013c4:	d3f9      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c6:	f7ff ffd3 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f002 fc3b 	bl	8003c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff fb99 	bl	8000b04 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013d8:	08003cdc 	.word	0x08003cdc
  ldr  r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013e0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80013e4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80013e8:	20000140 	.word	0x20000140

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_Init+0x40>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_Init+0x40>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x40>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f917 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fdd2 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f92f 	bl	80016b6 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001470:	f000 f8f7 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000004 	.word	0x20000004
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20000008 	.word	0x20000008

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2000013c 	.word	0x2000013c

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800162c:	f7ff ff8e 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff29 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff3e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff8e 	bl	80015a0 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5d 	bl	800154c <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff31 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d004      	beq.n	80016ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e00c      	b.n	8001706 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2205      	movs	r2, #5
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e165      	b.n	80019fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 8154 	bne.w	80019f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d00b      	beq.n	800176e <HAL_GPIO_Init+0x5a>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d007      	beq.n	800176e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001762:	2b11      	cmp	r3, #17
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b12      	cmp	r3, #18
 800176c:	d130      	bne.n	80017d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0xfc>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b12      	cmp	r3, #18
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80ae 	beq.w	80019f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b6:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <HAL_GPIO_Init+0x304>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d025      	beq.n	800192e <HAL_GPIO_Init+0x21a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <HAL_GPIO_Init+0x308>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <HAL_GPIO_Init+0x216>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x212>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	; (8001a24 <HAL_GPIO_Init+0x310>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x20e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4a      	ldr	r2, [pc, #296]	; (8001a28 <HAL_GPIO_Init+0x314>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x20a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a49      	ldr	r2, [pc, #292]	; (8001a2c <HAL_GPIO_Init+0x318>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x206>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a48      	ldr	r2, [pc, #288]	; (8001a30 <HAL_GPIO_Init+0x31c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x202>
 8001912:	2306      	movs	r3, #6
 8001914:	e00c      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001916:	2307      	movs	r3, #7
 8001918:	e00a      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800191a:	2305      	movs	r3, #5
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800191e:	2304      	movs	r3, #4
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4934      	ldr	r1, [pc, #208]	; (8001a14 <HAL_GPIO_Init+0x300>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_GPIO_Init+0x320>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001972:	4a30      	ldr	r2, [pc, #192]	; (8001a34 <HAL_GPIO_Init+0x320>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001978:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <HAL_GPIO_Init+0x320>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199c:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <HAL_GPIO_Init+0x320>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f ae96 	bls.w	8001730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	3724      	adds	r7, #36	; 0x24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40013800 	.word	0x40013800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40021400 	.word	0x40021400
 8001a30:	40021800 	.word	0x40021800
 8001a34:	40013c00 	.word	0x40013c00

08001a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a48:	787b      	ldrb	r3, [r7, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a54:	e003      	b.n	8001a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	041a      	lsls	r2, r3, #16
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	619a      	str	r2, [r3, #24]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0cc      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d90c      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d044      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d119      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e067      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4934      	ldr	r1, [pc, #208]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff fc9a 	bl	8001494 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff fc96 	bl	8001494 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e04f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d20c      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f855 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	fa21 f303 	lsr.w	r3, r1, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fc0e 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	08003cb4 	.word	0x08003cb4
 8001c30:	20000004 	.word	0x20000004
 8001c34:	20000008 	.word	0x20000008

08001c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c54:	f7ff fff0 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c58:	4601      	mov	r1, r0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	08003cc4 	.word	0x08003cc4

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	f7ff ffdc 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c80:	4601      	mov	r1, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0b5b      	lsrs	r3, r3, #13
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08003cc4 	.word	0x08003cc4

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cba:	4b9f      	ldr	r3, [pc, #636]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	f200 8130 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x288>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_RCC_GetSysClockFreq+0x30>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001d05 	.word	0x08001d05
 8001cd4:	08001f29 	.word	0x08001f29
 8001cd8:	08001f29 	.word	0x08001f29
 8001cdc:	08001f29 	.word	0x08001f29
 8001ce0:	08001d0b 	.word	0x08001d0b
 8001ce4:	08001f29 	.word	0x08001f29
 8001ce8:	08001f29 	.word	0x08001f29
 8001cec:	08001f29 	.word	0x08001f29
 8001cf0:	08001d11 	.word	0x08001d11
 8001cf4:	08001f29 	.word	0x08001f29
 8001cf8:	08001f29 	.word	0x08001f29
 8001cfc:	08001f29 	.word	0x08001f29
 8001d00:	08001e1f 	.word	0x08001e1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b8d      	ldr	r3, [pc, #564]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x29c>)
 8001d06:	613b      	str	r3, [r7, #16]
       break;
 8001d08:	e111      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001d0c:	613b      	str	r3, [r7, #16]
      break;
 8001d0e:	e10e      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d10:	4b89      	ldr	r3, [pc, #548]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d18:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1a:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d023      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	f04f 0400 	mov.w	r4, #0
 8001d30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	ea03 0501 	and.w	r5, r3, r1
 8001d3c:	ea04 0602 	and.w	r6, r4, r2
 8001d40:	4a7f      	ldr	r2, [pc, #508]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001d42:	fb02 f106 	mul.w	r1, r2, r6
 8001d46:	2200      	movs	r2, #0
 8001d48:	fb02 f205 	mul.w	r2, r2, r5
 8001d4c:	440a      	add	r2, r1
 8001d4e:	497c      	ldr	r1, [pc, #496]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001d50:	fba5 0101 	umull	r0, r1, r5, r1
 8001d54:	1853      	adds	r3, r2, r1
 8001d56:	4619      	mov	r1, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f04f 0400 	mov.w	r4, #0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4623      	mov	r3, r4
 8001d62:	f7fe fa4f 	bl	8000204 <__aeabi_uldivmod>
 8001d66:	4603      	mov	r3, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e049      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6e:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	f04f 0400 	mov.w	r4, #0
 8001d78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	ea03 0501 	and.w	r5, r3, r1
 8001d84:	ea04 0602 	and.w	r6, r4, r2
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4632      	mov	r2, r6
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	f04f 0400 	mov.w	r4, #0
 8001d94:	0154      	lsls	r4, r2, #5
 8001d96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d9a:	014b      	lsls	r3, r1, #5
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4622      	mov	r2, r4
 8001da0:	1b49      	subs	r1, r1, r5
 8001da2:	eb62 0206 	sbc.w	r2, r2, r6
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f04f 0400 	mov.w	r4, #0
 8001dae:	0194      	lsls	r4, r2, #6
 8001db0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001db4:	018b      	lsls	r3, r1, #6
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	eb64 0402 	sbc.w	r4, r4, r2
 8001dbc:	f04f 0100 	mov.w	r1, #0
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	00e2      	lsls	r2, r4, #3
 8001dc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dca:	00d9      	lsls	r1, r3, #3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4614      	mov	r4, r2
 8001dd0:	195b      	adds	r3, r3, r5
 8001dd2:	eb44 0406 	adc.w	r4, r4, r6
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	02a2      	lsls	r2, r4, #10
 8001de0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001de4:	0299      	lsls	r1, r3, #10
 8001de6:	460b      	mov	r3, r1
 8001de8:	4614      	mov	r4, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	4621      	mov	r1, r4
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f04f 0400 	mov.w	r4, #0
 8001df4:	461a      	mov	r2, r3
 8001df6:	4623      	mov	r3, r4
 8001df8:	f7fe fa04 	bl	8000204 <__aeabi_uldivmod>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	460c      	mov	r4, r1
 8001e00:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e02:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	613b      	str	r3, [r7, #16]
      break;
 8001e1c:	e087      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e26:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e28:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e34:	4b40      	ldr	r3, [pc, #256]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	f04f 0400 	mov.w	r4, #0
 8001e3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	ea03 0501 	and.w	r5, r3, r1
 8001e4a:	ea04 0602 	and.w	r6, r4, r2
 8001e4e:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001e50:	fb02 f106 	mul.w	r1, r2, r6
 8001e54:	2200      	movs	r2, #0
 8001e56:	fb02 f205 	mul.w	r2, r2, r5
 8001e5a:	440a      	add	r2, r1
 8001e5c:	4938      	ldr	r1, [pc, #224]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001e5e:	fba5 0101 	umull	r0, r1, r5, r1
 8001e62:	1853      	adds	r3, r2, r1
 8001e64:	4619      	mov	r1, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f04f 0400 	mov.w	r4, #0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4623      	mov	r3, r4
 8001e70:	f7fe f9c8 	bl	8000204 <__aeabi_uldivmod>
 8001e74:	4603      	mov	r3, r0
 8001e76:	460c      	mov	r4, r1
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e049      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	f04f 0400 	mov.w	r4, #0
 8001e86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	ea03 0501 	and.w	r5, r3, r1
 8001e92:	ea04 0602 	and.w	r6, r4, r2
 8001e96:	4629      	mov	r1, r5
 8001e98:	4632      	mov	r2, r6
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	f04f 0400 	mov.w	r4, #0
 8001ea2:	0154      	lsls	r4, r2, #5
 8001ea4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ea8:	014b      	lsls	r3, r1, #5
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4622      	mov	r2, r4
 8001eae:	1b49      	subs	r1, r1, r5
 8001eb0:	eb62 0206 	sbc.w	r2, r2, r6
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	f04f 0400 	mov.w	r4, #0
 8001ebc:	0194      	lsls	r4, r2, #6
 8001ebe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ec2:	018b      	lsls	r3, r1, #6
 8001ec4:	1a5b      	subs	r3, r3, r1
 8001ec6:	eb64 0402 	sbc.w	r4, r4, r2
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	00e2      	lsls	r2, r4, #3
 8001ed4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ed8:	00d9      	lsls	r1, r3, #3
 8001eda:	460b      	mov	r3, r1
 8001edc:	4614      	mov	r4, r2
 8001ede:	195b      	adds	r3, r3, r5
 8001ee0:	eb44 0406 	adc.w	r4, r4, r6
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	02a2      	lsls	r2, r4, #10
 8001eee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ef2:	0299      	lsls	r1, r3, #10
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	4621      	mov	r1, r4
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f04f 0400 	mov.w	r4, #0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4623      	mov	r3, r4
 8001f06:	f7fe f97d 	bl	8000204 <__aeabi_uldivmod>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x298>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0f1b      	lsrs	r3, r3, #28
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	613b      	str	r3, [r7, #16]
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x29c>)
 8001f2a:	613b      	str	r3, [r7, #16]
      break;
 8001f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2e:	693b      	ldr	r3, [r7, #16]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	00f42400 	.word	0x00f42400
 8001f40:	017d7840 	.word	0x017d7840

08001f44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8083 	beq.w	8002064 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f5e:	4b95      	ldr	r3, [pc, #596]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d019      	beq.n	8001f9e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f6a:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d106      	bne.n	8001f84 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f76:	4b8f      	ldr	r3, [pc, #572]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f82:	d00c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f84:	4b8b      	ldr	r3, [pc, #556]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	d112      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f90:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9e:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d05b      	beq.n	8002062 <HAL_RCC_OscConfig+0x11e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d157      	bne.n	8002062 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e216      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x8a>
 8001fc0:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a7b      	ldr	r2, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e01d      	b.n	800200a <HAL_RCC_OscConfig+0xc6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xae>
 8001fd8:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a72      	ldr	r2, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0xc6>
 8001ff2:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6f      	ldr	r2, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d013      	beq.n	800203a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff fa3f 	bl	8001494 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201a:	f7ff fa3b 	bl	8001494 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1db      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202c:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0xd6>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff fa2b 	bl	8001494 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002042:	f7ff fa27 	bl	8001494 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1c7      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002054:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0xfe>
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002062:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d06f      	beq.n	8002150 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b00      	cmp	r3, #0
 800207a:	d017      	beq.n	80020ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002084:	2b08      	cmp	r3, #8
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d11c      	bne.n	80020da <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a0:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d116      	bne.n	80020da <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x180>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e18f      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4938      	ldr	r1, [pc, #224]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d8:	e03a      	b.n	8002150 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d020      	beq.n	8002124 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff f9d4 	bl	8001494 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7ff f9d0 	bl	8001494 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e170      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4925      	ldr	r1, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
 8002122:	e015      	b.n	8002150 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7ff f9b3 	bl	8001494 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff f9af 	bl	8001494 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e14f      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d037      	beq.n	80021cc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d016      	beq.n	8002192 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_RCC_OscConfig+0x278>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff f993 	bl	8001494 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002172:	f7ff f98f 	bl	8001494 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e12f      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x22e>
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_OscConfig+0x278>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7ff f97c 	bl	8001494 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff f978 	bl	8001494 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d908      	bls.n	80021c0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e118      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470000 	.word	0x42470000
 80021bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b8a      	ldr	r3, [pc, #552]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80021c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e9      	bne.n	80021a0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8097 	beq.w	8002308 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021de:	4b83      	ldr	r3, [pc, #524]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a7e      	ldr	r2, [pc, #504]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b7c      	ldr	r3, [pc, #496]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002206:	2301      	movs	r3, #1
 8002208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b79      	ldr	r3, [pc, #484]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a75      	ldr	r2, [pc, #468]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7ff f937 	bl	8001494 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7ff f933 	bl	8001494 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0d3      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b6c      	ldr	r3, [pc, #432]	; (80023f0 <HAL_RCC_OscConfig+0x4ac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x31a>
 8002250:	4b66      	ldr	r3, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	e01c      	b.n	8002298 <HAL_RCC_OscConfig+0x354>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x33c>
 8002266:	4b61      	ldr	r3, [pc, #388]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a60      	ldr	r2, [pc, #384]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	4b5e      	ldr	r3, [pc, #376]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a5d      	ldr	r2, [pc, #372]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0x354>
 8002280:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a59      	ldr	r2, [pc, #356]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a56      	ldr	r2, [pc, #344]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff f8f8 	bl	8001494 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7ff f8f4 	bl	8001494 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e092      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ee      	beq.n	80022a8 <HAL_RCC_OscConfig+0x364>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7ff f8e2 	bl	8001494 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7ff f8de 	bl	8001494 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e07c      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ea:	4b40      	ldr	r3, [pc, #256]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ee      	bne.n	80022d4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fc:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a3a      	ldr	r2, [pc, #232]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d068      	beq.n	80023e2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d060      	beq.n	80023de <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d145      	bne.n	80023b0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <HAL_RCC_OscConfig+0x4b0>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7ff f8b3 	bl	8001494 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff f8af 	bl	8001494 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e04f      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002344:	4b29      	ldr	r3, [pc, #164]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	019b      	lsls	r3, r3, #6
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	3b01      	subs	r3, #1
 800236a:	041b      	lsls	r3, r3, #16
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	071b      	lsls	r3, r3, #28
 800237c:	491b      	ldr	r1, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_OscConfig+0x4b0>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff f884 	bl	8001494 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7ff f880 	bl	8001494 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e020      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x44c>
 80023ae:	e018      	b.n	80023e2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_RCC_OscConfig+0x4b0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7ff f86d 	bl	8001494 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff f869 	bl	8001494 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e009      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_OscConfig+0x4a8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x47a>
 80023dc:	e001      	b.n	80023e2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42470060 	.word	0x42470060

080023f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e01d      	b.n	8002446 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fdfc 	bl	800101c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3304      	adds	r3, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f000 f9bc 	bl	80027b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e01d      	b.n	800249c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f815 	bl	80024a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f000 f991 	bl	80027b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0b4      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x184>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0c      	cmp	r3, #12
 80024e6:	f200 809f 	bhi.w	8002628 <HAL_TIM_PWM_ConfigChannel+0x170>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002525 	.word	0x08002525
 80024f4:	08002629 	.word	0x08002629
 80024f8:	08002629 	.word	0x08002629
 80024fc:	08002629 	.word	0x08002629
 8002500:	08002565 	.word	0x08002565
 8002504:	08002629 	.word	0x08002629
 8002508:	08002629 	.word	0x08002629
 800250c:	08002629 	.word	0x08002629
 8002510:	080025a7 	.word	0x080025a7
 8002514:	08002629 	.word	0x08002629
 8002518:	08002629 	.word	0x08002629
 800251c:	08002629 	.word	0x08002629
 8002520:	080025e7 	.word	0x080025e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f9e2 	bl	80028f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0204 	bic.w	r2, r2, #4
 800254e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6999      	ldr	r1, [r3, #24]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	619a      	str	r2, [r3, #24]
      break;
 8002562:	e062      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa32 	bl	80029d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6999      	ldr	r1, [r3, #24]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	021a      	lsls	r2, r3, #8
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
      break;
 80025a4:	e041      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fa87 	bl	8002ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0208 	orr.w	r2, r2, #8
 80025c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0204 	bic.w	r2, r2, #4
 80025d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69d9      	ldr	r1, [r3, #28]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
      break;
 80025e4:	e021      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fadb 	bl	8002ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	61da      	str	r2, [r3, #28]
      break;
 8002626:	e000      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002628:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_TIM_ConfigClockSource+0x18>
 8002658:	2302      	movs	r3, #2
 800265a:	e0a6      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x166>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800267a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d067      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x120>
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d80b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x6c>
 8002698:	2b10      	cmp	r3, #16
 800269a:	d073      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
 800269c:	2b10      	cmp	r3, #16
 800269e:	d802      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x62>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06f      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80026a4:	e078      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d06c      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
 80026aa:	2b30      	cmp	r3, #48	; 0x30
 80026ac:	d06a      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026ae:	e073      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d00d      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0x8c>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d804      	bhi.n	80026c2 <HAL_TIM_ConfigClockSource+0x7e>
 80026b8:	2b50      	cmp	r3, #80	; 0x50
 80026ba:	d033      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0xe0>
 80026bc:	2b60      	cmp	r3, #96	; 0x60
 80026be:	d041      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026c0:	e06a      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c6:	d066      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x152>
 80026c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026cc:	d017      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026ce:	e063      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f000 fb32 	bl	8002d48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e04c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 fb1b 	bl	8002d48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002720:	609a      	str	r2, [r3, #8]
      break;
 8002722:	e039      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	461a      	mov	r2, r3
 8002732:	f000 fa8f 	bl	8002c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2150      	movs	r1, #80	; 0x50
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fae8 	bl	8002d12 <TIM_ITRx_SetConfig>
      break;
 8002742:	e029      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	461a      	mov	r2, r3
 8002752:	f000 faae 	bl	8002cb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2160      	movs	r1, #96	; 0x60
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fad8 	bl	8002d12 <TIM_ITRx_SetConfig>
      break;
 8002762:	e019      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	461a      	mov	r2, r3
 8002772:	f000 fa6f 	bl	8002c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fac8 	bl	8002d12 <TIM_ITRx_SetConfig>
      break;
 8002782:	e009      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 fabf 	bl	8002d12 <TIM_ITRx_SetConfig>
      break;
 8002794:	e000      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a40      	ldr	r2, [pc, #256]	; (80028c8 <TIM_Base_SetConfig+0x114>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <TIM_Base_SetConfig+0x40>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d2:	d00f      	beq.n	80027f4 <TIM_Base_SetConfig+0x40>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3d      	ldr	r2, [pc, #244]	; (80028cc <TIM_Base_SetConfig+0x118>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00b      	beq.n	80027f4 <TIM_Base_SetConfig+0x40>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <TIM_Base_SetConfig+0x11c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <TIM_Base_SetConfig+0x40>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <TIM_Base_SetConfig+0x120>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_Base_SetConfig+0x40>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a3a      	ldr	r2, [pc, #232]	; (80028d8 <TIM_Base_SetConfig+0x124>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d108      	bne.n	8002806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a2f      	ldr	r2, [pc, #188]	; (80028c8 <TIM_Base_SetConfig+0x114>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d02b      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d027      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a2c      	ldr	r2, [pc, #176]	; (80028cc <TIM_Base_SetConfig+0x118>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d023      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <TIM_Base_SetConfig+0x11c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01f      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <TIM_Base_SetConfig+0x120>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01b      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <TIM_Base_SetConfig+0x124>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d017      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a28      	ldr	r2, [pc, #160]	; (80028dc <TIM_Base_SetConfig+0x128>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <TIM_Base_SetConfig+0x12c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00f      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <TIM_Base_SetConfig+0x130>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00b      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <TIM_Base_SetConfig+0x134>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <TIM_Base_SetConfig+0x138>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <TIM_Base_SetConfig+0x13c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d108      	bne.n	8002878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <TIM_Base_SetConfig+0x114>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_Base_SetConfig+0xf8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <TIM_Base_SetConfig+0x124>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d103      	bne.n	80028b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	615a      	str	r2, [r3, #20]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800
 80028d4:	40000c00 	.word	0x40000c00
 80028d8:	40010400 	.word	0x40010400
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800
 80028e8:	40001800 	.word	0x40001800
 80028ec:	40001c00 	.word	0x40001c00
 80028f0:	40002000 	.word	0x40002000

080028f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f023 0201 	bic.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f023 0302 	bic.w	r3, r3, #2
 800293c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a20      	ldr	r2, [pc, #128]	; (80029cc <TIM_OC1_SetConfig+0xd8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_OC1_SetConfig+0x64>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <TIM_OC1_SetConfig+0xdc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d10c      	bne.n	8002972 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0308 	bic.w	r3, r3, #8
 800295e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a15      	ldr	r2, [pc, #84]	; (80029cc <TIM_OC1_SetConfig+0xd8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <TIM_OC1_SetConfig+0x8e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <TIM_OC1_SetConfig+0xdc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d111      	bne.n	80029a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	621a      	str	r2, [r3, #32]
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40010400 	.word	0x40010400

080029d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	f023 0210 	bic.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0320 	bic.w	r3, r3, #32
 8002a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <TIM_OC2_SetConfig+0xe4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <TIM_OC2_SetConfig+0x68>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a21      	ldr	r2, [pc, #132]	; (8002abc <TIM_OC2_SetConfig+0xe8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d10d      	bne.n	8002a58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <TIM_OC2_SetConfig+0xe4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_OC2_SetConfig+0x94>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a16      	ldr	r2, [pc, #88]	; (8002abc <TIM_OC2_SetConfig+0xe8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d113      	bne.n	8002a90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40010400 	.word	0x40010400

08002ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <TIM_OC3_SetConfig+0xe0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <TIM_OC3_SetConfig+0x66>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <TIM_OC3_SetConfig+0xe4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10d      	bne.n	8002b42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a16      	ldr	r2, [pc, #88]	; (8002ba0 <TIM_OC3_SetConfig+0xe0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d003      	beq.n	8002b52 <TIM_OC3_SetConfig+0x92>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <TIM_OC3_SetConfig+0xe4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d113      	bne.n	8002b7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	621a      	str	r2, [r3, #32]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <TIM_OC4_SetConfig+0xa4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_OC4_SetConfig+0x68>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <TIM_OC4_SetConfig+0xa8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d109      	bne.n	8002c24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40010400 	.word	0x40010400

08002c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f023 0201 	bic.w	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 030a 	bic.w	r3, r3, #10
 8002c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b087      	sub	sp, #28
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0210 	bic.w	r2, r3, #16
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	031b      	lsls	r3, r3, #12
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	621a      	str	r2, [r3, #32]
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f043 0307 	orr.w	r3, r3, #7
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e05a      	b.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d022      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dec:	d01d      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d018      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10c      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40010400 	.word	0x40010400
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40001800 	.word	0x40001800

08002e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e03d      	b.n	8002f18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e03f      	b.n	8002fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe f928 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 faef 	bl	800354c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d130      	bne.n	800303a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Transmit_IT+0x26>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e029      	b.n	800303c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Transmit_IT+0x38>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e022      	b.n	800303c <HAL_UART_Transmit_IT+0x7e>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2221      	movs	r2, #33	; 0x21
 800301a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003034:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800303a:	2302      	movs	r3, #2
  }
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	d140      	bne.n	80030e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_UART_Receive_IT+0x26>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e039      	b.n	80030e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_UART_Receive_IT+0x38>
 800307c:	2302      	movs	r3, #2
 800307e:	e032      	b.n	80030e6 <HAL_UART_Receive_IT+0x9e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2222      	movs	r2, #34	; 0x22
 80030a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0220 	orr.w	r2, r2, #32
 80030de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_UART_IRQHandler+0x52>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f982 	bl	8003448 <UART_Receive_IT>
      return;
 8003144:	e0d1      	b.n	80032ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80b0 	beq.w	80032ae <HAL_UART_IRQHandler+0x1ba>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_UART_IRQHandler+0x70>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80a5 	beq.w	80032ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_UART_IRQHandler+0x90>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_UART_IRQHandler+0xb0>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	f043 0202 	orr.w	r2, r3, #2
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_UART_IRQHandler+0xd0>
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	f043 0204 	orr.w	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00f      	beq.n	80031ee <HAL_UART_IRQHandler+0xfa>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_UART_IRQHandler+0xee>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	f043 0208 	orr.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d078      	beq.n	80032e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <HAL_UART_IRQHandler+0x11c>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f91c 	bl	8003448 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_UART_IRQHandler+0x144>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d031      	beq.n	800329c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f865 	bl	8003308 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d123      	bne.n	8003294 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <HAL_UART_IRQHandler+0x1fc>)
 800326a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fa2c 	bl	80016ce <HAL_DMA_Abort_IT>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003286:	4610      	mov	r0, r2
 8003288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328a:	e00e      	b.n	80032aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f831 	bl	80032f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003292:	e00a      	b.n	80032aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f82d 	bl	80032f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	e006      	b.n	80032aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f829 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032a8:	e01e      	b.n	80032e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032aa:	bf00      	nop
    return;
 80032ac:	e01c      	b.n	80032e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_UART_IRQHandler+0x1d6>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f852 	bl	800336c <UART_Transmit_IT>
    return;
 80032c8:	e00f      	b.n	80032ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_UART_IRQHandler+0x1f6>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f89a 	bl	8003418 <UART_EndTransmit_IT>
    return;
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80032e8:	bf00      	nop
  }
}
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	08003345 	.word	0x08003345

080032f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800331e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff ffc8 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b21      	cmp	r3, #33	; 0x21
 800337e:	d144      	bne.n	800340a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	d11a      	bne.n	80033c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800339e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	621a      	str	r2, [r3, #32]
 80033b2:	e00e      	b.n	80033d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	621a      	str	r2, [r3, #32]
 80033be:	e008      	b.n	80033d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	1c59      	adds	r1, r3, #1
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6211      	str	r1, [r2, #32]
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4619      	mov	r1, r3
 80033e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10f      	bne.n	8003406 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003404:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fd ff7b 	bl	8001334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b22      	cmp	r3, #34	; 0x22
 800345a:	d171      	bne.n	8003540 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003464:	d123      	bne.n	80034ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10e      	bne.n	8003492 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	1c9a      	adds	r2, r3, #2
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
 8003490:	e029      	b.n	80034e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	b29b      	uxth	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
 80034ac:	e01b      	b.n	80034e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6858      	ldr	r0, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	1c59      	adds	r1, r3, #1
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6291      	str	r1, [r2, #40]	; 0x28
 80034c6:	b2c2      	uxtb	r2, r0
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e00c      	b.n	80034e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	1c58      	adds	r0, r3, #1
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	6288      	str	r0, [r1, #40]	; 0x28
 80034de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4619      	mov	r1, r3
 80034f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d120      	bne.n	800353c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0220 	bic.w	r2, r2, #32
 8003508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fec6 	bl	80012c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e002      	b.n	8003542 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800354c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800358e:	f023 030c 	bic.w	r3, r3, #12
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	68f9      	ldr	r1, [r7, #12]
 8003598:	430b      	orrs	r3, r1
 800359a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ba:	f040 818b 	bne.w	80038d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4ac1      	ldr	r2, [pc, #772]	; (80038c8 <UART_SetConfig+0x37c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d005      	beq.n	80035d4 <UART_SetConfig+0x88>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4abf      	ldr	r2, [pc, #764]	; (80038cc <UART_SetConfig+0x380>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f040 80bd 	bne.w	800374e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035d4:	f7fe fb50 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 80035d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	461d      	mov	r5, r3
 80035de:	f04f 0600 	mov.w	r6, #0
 80035e2:	46a8      	mov	r8, r5
 80035e4:	46b1      	mov	r9, r6
 80035e6:	eb18 0308 	adds.w	r3, r8, r8
 80035ea:	eb49 0409 	adc.w	r4, r9, r9
 80035ee:	4698      	mov	r8, r3
 80035f0:	46a1      	mov	r9, r4
 80035f2:	eb18 0805 	adds.w	r8, r8, r5
 80035f6:	eb49 0906 	adc.w	r9, r9, r6
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003606:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800360a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800360e:	4688      	mov	r8, r1
 8003610:	4691      	mov	r9, r2
 8003612:	eb18 0005 	adds.w	r0, r8, r5
 8003616:	eb49 0106 	adc.w	r1, r9, r6
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	461d      	mov	r5, r3
 8003620:	f04f 0600 	mov.w	r6, #0
 8003624:	196b      	adds	r3, r5, r5
 8003626:	eb46 0406 	adc.w	r4, r6, r6
 800362a:	461a      	mov	r2, r3
 800362c:	4623      	mov	r3, r4
 800362e:	f7fc fde9 	bl	8000204 <__aeabi_uldivmod>
 8003632:	4603      	mov	r3, r0
 8003634:	460c      	mov	r4, r1
 8003636:	461a      	mov	r2, r3
 8003638:	4ba5      	ldr	r3, [pc, #660]	; (80038d0 <UART_SetConfig+0x384>)
 800363a:	fba3 2302 	umull	r2, r3, r3, r2
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	461d      	mov	r5, r3
 8003648:	f04f 0600 	mov.w	r6, #0
 800364c:	46a9      	mov	r9, r5
 800364e:	46b2      	mov	sl, r6
 8003650:	eb19 0309 	adds.w	r3, r9, r9
 8003654:	eb4a 040a 	adc.w	r4, sl, sl
 8003658:	4699      	mov	r9, r3
 800365a:	46a2      	mov	sl, r4
 800365c:	eb19 0905 	adds.w	r9, r9, r5
 8003660:	eb4a 0a06 	adc.w	sl, sl, r6
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003670:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003674:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003678:	4689      	mov	r9, r1
 800367a:	4692      	mov	sl, r2
 800367c:	eb19 0005 	adds.w	r0, r9, r5
 8003680:	eb4a 0106 	adc.w	r1, sl, r6
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	461d      	mov	r5, r3
 800368a:	f04f 0600 	mov.w	r6, #0
 800368e:	196b      	adds	r3, r5, r5
 8003690:	eb46 0406 	adc.w	r4, r6, r6
 8003694:	461a      	mov	r2, r3
 8003696:	4623      	mov	r3, r4
 8003698:	f7fc fdb4 	bl	8000204 <__aeabi_uldivmod>
 800369c:	4603      	mov	r3, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <UART_SetConfig+0x384>)
 80036a4:	fba3 1302 	umull	r1, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	2164      	movs	r1, #100	; 0x64
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	3332      	adds	r3, #50	; 0x32
 80036b6:	4a86      	ldr	r2, [pc, #536]	; (80038d0 <UART_SetConfig+0x384>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036c4:	4498      	add	r8, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	461d      	mov	r5, r3
 80036ca:	f04f 0600 	mov.w	r6, #0
 80036ce:	46a9      	mov	r9, r5
 80036d0:	46b2      	mov	sl, r6
 80036d2:	eb19 0309 	adds.w	r3, r9, r9
 80036d6:	eb4a 040a 	adc.w	r4, sl, sl
 80036da:	4699      	mov	r9, r3
 80036dc:	46a2      	mov	sl, r4
 80036de:	eb19 0905 	adds.w	r9, r9, r5
 80036e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036fa:	4689      	mov	r9, r1
 80036fc:	4692      	mov	sl, r2
 80036fe:	eb19 0005 	adds.w	r0, r9, r5
 8003702:	eb4a 0106 	adc.w	r1, sl, r6
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	461d      	mov	r5, r3
 800370c:	f04f 0600 	mov.w	r6, #0
 8003710:	196b      	adds	r3, r5, r5
 8003712:	eb46 0406 	adc.w	r4, r6, r6
 8003716:	461a      	mov	r2, r3
 8003718:	4623      	mov	r3, r4
 800371a:	f7fc fd73 	bl	8000204 <__aeabi_uldivmod>
 800371e:	4603      	mov	r3, r0
 8003720:	460c      	mov	r4, r1
 8003722:	461a      	mov	r2, r3
 8003724:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <UART_SetConfig+0x384>)
 8003726:	fba3 1302 	umull	r1, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2164      	movs	r1, #100	; 0x64
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	3332      	adds	r3, #50	; 0x32
 8003738:	4a65      	ldr	r2, [pc, #404]	; (80038d0 <UART_SetConfig+0x384>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	f003 0207 	and.w	r2, r3, #7
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4442      	add	r2, r8
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	e26f      	b.n	8003c2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800374e:	f7fe fa7f 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8003752:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	461d      	mov	r5, r3
 8003758:	f04f 0600 	mov.w	r6, #0
 800375c:	46a8      	mov	r8, r5
 800375e:	46b1      	mov	r9, r6
 8003760:	eb18 0308 	adds.w	r3, r8, r8
 8003764:	eb49 0409 	adc.w	r4, r9, r9
 8003768:	4698      	mov	r8, r3
 800376a:	46a1      	mov	r9, r4
 800376c:	eb18 0805 	adds.w	r8, r8, r5
 8003770:	eb49 0906 	adc.w	r9, r9, r6
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003780:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003784:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003788:	4688      	mov	r8, r1
 800378a:	4691      	mov	r9, r2
 800378c:	eb18 0005 	adds.w	r0, r8, r5
 8003790:	eb49 0106 	adc.w	r1, r9, r6
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	461d      	mov	r5, r3
 800379a:	f04f 0600 	mov.w	r6, #0
 800379e:	196b      	adds	r3, r5, r5
 80037a0:	eb46 0406 	adc.w	r4, r6, r6
 80037a4:	461a      	mov	r2, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	f7fc fd2c 	bl	8000204 <__aeabi_uldivmod>
 80037ac:	4603      	mov	r3, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <UART_SetConfig+0x384>)
 80037b4:	fba3 2302 	umull	r2, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	461d      	mov	r5, r3
 80037c2:	f04f 0600 	mov.w	r6, #0
 80037c6:	46a9      	mov	r9, r5
 80037c8:	46b2      	mov	sl, r6
 80037ca:	eb19 0309 	adds.w	r3, r9, r9
 80037ce:	eb4a 040a 	adc.w	r4, sl, sl
 80037d2:	4699      	mov	r9, r3
 80037d4:	46a2      	mov	sl, r4
 80037d6:	eb19 0905 	adds.w	r9, r9, r5
 80037da:	eb4a 0a06 	adc.w	sl, sl, r6
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037f2:	4689      	mov	r9, r1
 80037f4:	4692      	mov	sl, r2
 80037f6:	eb19 0005 	adds.w	r0, r9, r5
 80037fa:	eb4a 0106 	adc.w	r1, sl, r6
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	461d      	mov	r5, r3
 8003804:	f04f 0600 	mov.w	r6, #0
 8003808:	196b      	adds	r3, r5, r5
 800380a:	eb46 0406 	adc.w	r4, r6, r6
 800380e:	461a      	mov	r2, r3
 8003810:	4623      	mov	r3, r4
 8003812:	f7fc fcf7 	bl	8000204 <__aeabi_uldivmod>
 8003816:	4603      	mov	r3, r0
 8003818:	460c      	mov	r4, r1
 800381a:	461a      	mov	r2, r3
 800381c:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <UART_SetConfig+0x384>)
 800381e:	fba3 1302 	umull	r1, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2164      	movs	r1, #100	; 0x64
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a27      	ldr	r2, [pc, #156]	; (80038d0 <UART_SetConfig+0x384>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800383e:	4498      	add	r8, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	461d      	mov	r5, r3
 8003844:	f04f 0600 	mov.w	r6, #0
 8003848:	46a9      	mov	r9, r5
 800384a:	46b2      	mov	sl, r6
 800384c:	eb19 0309 	adds.w	r3, r9, r9
 8003850:	eb4a 040a 	adc.w	r4, sl, sl
 8003854:	4699      	mov	r9, r3
 8003856:	46a2      	mov	sl, r4
 8003858:	eb19 0905 	adds.w	r9, r9, r5
 800385c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800386c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003870:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003874:	4689      	mov	r9, r1
 8003876:	4692      	mov	sl, r2
 8003878:	eb19 0005 	adds.w	r0, r9, r5
 800387c:	eb4a 0106 	adc.w	r1, sl, r6
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	461d      	mov	r5, r3
 8003886:	f04f 0600 	mov.w	r6, #0
 800388a:	196b      	adds	r3, r5, r5
 800388c:	eb46 0406 	adc.w	r4, r6, r6
 8003890:	461a      	mov	r2, r3
 8003892:	4623      	mov	r3, r4
 8003894:	f7fc fcb6 	bl	8000204 <__aeabi_uldivmod>
 8003898:	4603      	mov	r3, r0
 800389a:	460c      	mov	r4, r1
 800389c:	461a      	mov	r2, r3
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <UART_SetConfig+0x384>)
 80038a0:	fba3 1302 	umull	r1, r3, r3, r2
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	2164      	movs	r1, #100	; 0x64
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	3332      	adds	r3, #50	; 0x32
 80038b2:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <UART_SetConfig+0x384>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	f003 0207 	and.w	r2, r3, #7
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4442      	add	r2, r8
 80038c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80038c6:	e1b2      	b.n	8003c2e <UART_SetConfig+0x6e2>
 80038c8:	40011000 	.word	0x40011000
 80038cc:	40011400 	.word	0x40011400
 80038d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4ad7      	ldr	r2, [pc, #860]	; (8003c38 <UART_SetConfig+0x6ec>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d005      	beq.n	80038ea <UART_SetConfig+0x39e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4ad6      	ldr	r2, [pc, #856]	; (8003c3c <UART_SetConfig+0x6f0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	f040 80d1 	bne.w	8003a8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80038ea:	f7fe f9c5 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 80038ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	469a      	mov	sl, r3
 80038f4:	f04f 0b00 	mov.w	fp, #0
 80038f8:	46d0      	mov	r8, sl
 80038fa:	46d9      	mov	r9, fp
 80038fc:	eb18 0308 	adds.w	r3, r8, r8
 8003900:	eb49 0409 	adc.w	r4, r9, r9
 8003904:	4698      	mov	r8, r3
 8003906:	46a1      	mov	r9, r4
 8003908:	eb18 080a 	adds.w	r8, r8, sl
 800390c:	eb49 090b 	adc.w	r9, r9, fp
 8003910:	f04f 0100 	mov.w	r1, #0
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800391c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003920:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003924:	4688      	mov	r8, r1
 8003926:	4691      	mov	r9, r2
 8003928:	eb1a 0508 	adds.w	r5, sl, r8
 800392c:	eb4b 0609 	adc.w	r6, fp, r9
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4619      	mov	r1, r3
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	f04f 0400 	mov.w	r4, #0
 8003942:	0094      	lsls	r4, r2, #2
 8003944:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003948:	008b      	lsls	r3, r1, #2
 800394a:	461a      	mov	r2, r3
 800394c:	4623      	mov	r3, r4
 800394e:	4628      	mov	r0, r5
 8003950:	4631      	mov	r1, r6
 8003952:	f7fc fc57 	bl	8000204 <__aeabi_uldivmod>
 8003956:	4603      	mov	r3, r0
 8003958:	460c      	mov	r4, r1
 800395a:	461a      	mov	r2, r3
 800395c:	4bb8      	ldr	r3, [pc, #736]	; (8003c40 <UART_SetConfig+0x6f4>)
 800395e:	fba3 2302 	umull	r2, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	469b      	mov	fp, r3
 800396c:	f04f 0c00 	mov.w	ip, #0
 8003970:	46d9      	mov	r9, fp
 8003972:	46e2      	mov	sl, ip
 8003974:	eb19 0309 	adds.w	r3, r9, r9
 8003978:	eb4a 040a 	adc.w	r4, sl, sl
 800397c:	4699      	mov	r9, r3
 800397e:	46a2      	mov	sl, r4
 8003980:	eb19 090b 	adds.w	r9, r9, fp
 8003984:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003994:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003998:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800399c:	4689      	mov	r9, r1
 800399e:	4692      	mov	sl, r2
 80039a0:	eb1b 0509 	adds.w	r5, fp, r9
 80039a4:	eb4c 060a 	adc.w	r6, ip, sl
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4619      	mov	r1, r3
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f04f 0400 	mov.w	r4, #0
 80039ba:	0094      	lsls	r4, r2, #2
 80039bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039c0:	008b      	lsls	r3, r1, #2
 80039c2:	461a      	mov	r2, r3
 80039c4:	4623      	mov	r3, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	4631      	mov	r1, r6
 80039ca:	f7fc fc1b 	bl	8000204 <__aeabi_uldivmod>
 80039ce:	4603      	mov	r3, r0
 80039d0:	460c      	mov	r4, r1
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b9a      	ldr	r3, [pc, #616]	; (8003c40 <UART_SetConfig+0x6f4>)
 80039d6:	fba3 1302 	umull	r1, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2164      	movs	r1, #100	; 0x64
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	; 0x32
 80039e8:	4a95      	ldr	r2, [pc, #596]	; (8003c40 <UART_SetConfig+0x6f4>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f4:	4498      	add	r8, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	469b      	mov	fp, r3
 80039fa:	f04f 0c00 	mov.w	ip, #0
 80039fe:	46d9      	mov	r9, fp
 8003a00:	46e2      	mov	sl, ip
 8003a02:	eb19 0309 	adds.w	r3, r9, r9
 8003a06:	eb4a 040a 	adc.w	r4, sl, sl
 8003a0a:	4699      	mov	r9, r3
 8003a0c:	46a2      	mov	sl, r4
 8003a0e:	eb19 090b 	adds.w	r9, r9, fp
 8003a12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a2a:	4689      	mov	r9, r1
 8003a2c:	4692      	mov	sl, r2
 8003a2e:	eb1b 0509 	adds.w	r5, fp, r9
 8003a32:	eb4c 060a 	adc.w	r6, ip, sl
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	0094      	lsls	r4, r2, #2
 8003a4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a4e:	008b      	lsls	r3, r1, #2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4623      	mov	r3, r4
 8003a54:	4628      	mov	r0, r5
 8003a56:	4631      	mov	r1, r6
 8003a58:	f7fc fbd4 	bl	8000204 <__aeabi_uldivmod>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b77      	ldr	r3, [pc, #476]	; (8003c40 <UART_SetConfig+0x6f4>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	; 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	3332      	adds	r3, #50	; 0x32
 8003a76:	4a72      	ldr	r2, [pc, #456]	; (8003c40 <UART_SetConfig+0x6f4>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	f003 020f 	and.w	r2, r3, #15
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4442      	add	r2, r8
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	e0d0      	b.n	8003c2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7fe f8e0 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8003a90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	469a      	mov	sl, r3
 8003a96:	f04f 0b00 	mov.w	fp, #0
 8003a9a:	46d0      	mov	r8, sl
 8003a9c:	46d9      	mov	r9, fp
 8003a9e:	eb18 0308 	adds.w	r3, r8, r8
 8003aa2:	eb49 0409 	adc.w	r4, r9, r9
 8003aa6:	4698      	mov	r8, r3
 8003aa8:	46a1      	mov	r9, r4
 8003aaa:	eb18 080a 	adds.w	r8, r8, sl
 8003aae:	eb49 090b 	adc.w	r9, r9, fp
 8003ab2:	f04f 0100 	mov.w	r1, #0
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003abe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ac2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ac6:	4688      	mov	r8, r1
 8003ac8:	4691      	mov	r9, r2
 8003aca:	eb1a 0508 	adds.w	r5, sl, r8
 8003ace:	eb4b 0609 	adc.w	r6, fp, r9
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	f04f 0400 	mov.w	r4, #0
 8003ae4:	0094      	lsls	r4, r2, #2
 8003ae6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003aea:	008b      	lsls	r3, r1, #2
 8003aec:	461a      	mov	r2, r3
 8003aee:	4623      	mov	r3, r4
 8003af0:	4628      	mov	r0, r5
 8003af2:	4631      	mov	r1, r6
 8003af4:	f7fc fb86 	bl	8000204 <__aeabi_uldivmod>
 8003af8:	4603      	mov	r3, r0
 8003afa:	460c      	mov	r4, r1
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b50      	ldr	r3, [pc, #320]	; (8003c40 <UART_SetConfig+0x6f4>)
 8003b00:	fba3 2302 	umull	r2, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	469b      	mov	fp, r3
 8003b0e:	f04f 0c00 	mov.w	ip, #0
 8003b12:	46d9      	mov	r9, fp
 8003b14:	46e2      	mov	sl, ip
 8003b16:	eb19 0309 	adds.w	r3, r9, r9
 8003b1a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b1e:	4699      	mov	r9, r3
 8003b20:	46a2      	mov	sl, r4
 8003b22:	eb19 090b 	adds.w	r9, r9, fp
 8003b26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b3e:	4689      	mov	r9, r1
 8003b40:	4692      	mov	sl, r2
 8003b42:	eb1b 0509 	adds.w	r5, fp, r9
 8003b46:	eb4c 060a 	adc.w	r6, ip, sl
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	f04f 0400 	mov.w	r4, #0
 8003b5c:	0094      	lsls	r4, r2, #2
 8003b5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b62:	008b      	lsls	r3, r1, #2
 8003b64:	461a      	mov	r2, r3
 8003b66:	4623      	mov	r3, r4
 8003b68:	4628      	mov	r0, r5
 8003b6a:	4631      	mov	r1, r6
 8003b6c:	f7fc fb4a 	bl	8000204 <__aeabi_uldivmod>
 8003b70:	4603      	mov	r3, r0
 8003b72:	460c      	mov	r4, r1
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b32      	ldr	r3, [pc, #200]	; (8003c40 <UART_SetConfig+0x6f4>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	2164      	movs	r1, #100	; 0x64
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	3332      	adds	r3, #50	; 0x32
 8003b8a:	4a2d      	ldr	r2, [pc, #180]	; (8003c40 <UART_SetConfig+0x6f4>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b96:	4498      	add	r8, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	469b      	mov	fp, r3
 8003b9c:	f04f 0c00 	mov.w	ip, #0
 8003ba0:	46d9      	mov	r9, fp
 8003ba2:	46e2      	mov	sl, ip
 8003ba4:	eb19 0309 	adds.w	r3, r9, r9
 8003ba8:	eb4a 040a 	adc.w	r4, sl, sl
 8003bac:	4699      	mov	r9, r3
 8003bae:	46a2      	mov	sl, r4
 8003bb0:	eb19 090b 	adds.w	r9, r9, fp
 8003bb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bcc:	4689      	mov	r9, r1
 8003bce:	4692      	mov	sl, r2
 8003bd0:	eb1b 0509 	adds.w	r5, fp, r9
 8003bd4:	eb4c 060a 	adc.w	r6, ip, sl
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f04f 0400 	mov.w	r4, #0
 8003bea:	0094      	lsls	r4, r2, #2
 8003bec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bf0:	008b      	lsls	r3, r1, #2
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	f7fc fb03 	bl	8000204 <__aeabi_uldivmod>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <UART_SetConfig+0x6f4>)
 8003c06:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	2164      	movs	r1, #100	; 0x64
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	3332      	adds	r3, #50	; 0x32
 8003c18:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <UART_SetConfig+0x6f4>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4442      	add	r2, r8
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	e7ff      	b.n	8003c2e <UART_SetConfig+0x6e2>
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	51eb851f 	.word	0x51eb851f

08003c44 <__libc_init_array>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	4e0d      	ldr	r6, [pc, #52]	; (8003c7c <__libc_init_array+0x38>)
 8003c48:	4c0d      	ldr	r4, [pc, #52]	; (8003c80 <__libc_init_array+0x3c>)
 8003c4a:	1ba4      	subs	r4, r4, r6
 8003c4c:	10a4      	asrs	r4, r4, #2
 8003c4e:	2500      	movs	r5, #0
 8003c50:	42a5      	cmp	r5, r4
 8003c52:	d109      	bne.n	8003c68 <__libc_init_array+0x24>
 8003c54:	4e0b      	ldr	r6, [pc, #44]	; (8003c84 <__libc_init_array+0x40>)
 8003c56:	4c0c      	ldr	r4, [pc, #48]	; (8003c88 <__libc_init_array+0x44>)
 8003c58:	f000 f820 	bl	8003c9c <_init>
 8003c5c:	1ba4      	subs	r4, r4, r6
 8003c5e:	10a4      	asrs	r4, r4, #2
 8003c60:	2500      	movs	r5, #0
 8003c62:	42a5      	cmp	r5, r4
 8003c64:	d105      	bne.n	8003c72 <__libc_init_array+0x2e>
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c6c:	4798      	blx	r3
 8003c6e:	3501      	adds	r5, #1
 8003c70:	e7ee      	b.n	8003c50 <__libc_init_array+0xc>
 8003c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c76:	4798      	blx	r3
 8003c78:	3501      	adds	r5, #1
 8003c7a:	e7f2      	b.n	8003c62 <__libc_init_array+0x1e>
 8003c7c:	08003cd4 	.word	0x08003cd4
 8003c80:	08003cd4 	.word	0x08003cd4
 8003c84:	08003cd4 	.word	0x08003cd4
 8003c88:	08003cd8 	.word	0x08003cd8

08003c8c <memset>:
 8003c8c:	4402      	add	r2, r0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d100      	bne.n	8003c96 <memset+0xa>
 8003c94:	4770      	bx	lr
 8003c96:	f803 1b01 	strb.w	r1, [r3], #1
 8003c9a:	e7f9      	b.n	8003c90 <memset+0x4>

08003c9c <_init>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr

08003ca8 <_fini>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr
